import heroes.*
import objetos.*
import wollok.game.*
import hechizos.*
import gestorDeObjetos.*
import enemigos.*

describe "Tests para los heroes" {
	
	
	fixture {
		game.clear()
		warrior.position(game.origin())
		gestorDeObjetos.agregar(warrior)
		wizzard.init()
		tank.init()
		warrior.init()
	}
	
	test "heroe equipa y bebe pocion" {
		const pocionVida = new Pocion(esPocionMana = false, position = game.at(0, 0), image = "potionGreen.png")
		gestorDeObjetos.agregar(pocionVida)
		assert.equals(200, warrior.actualVida())
		warrior.tomarObjeto()
		assert.equals(#{ pocionVida }, warrior.mochila())
		warrior.actualVida(150)
		assert.equals(150, warrior.actualVida())
		warrior.beberPocionVida()
		assert.equals(#{ }, warrior.mochila())
		assert.equals(200, warrior.actualVida())
	}
	
	test "Heroe toma un arma y se lo equipa" {
		const armaHacha = new Arma(danioArma = 12, position = game.at(0, 0), image = "hacha.png")
		gestorDeObjetos.agregar(armaHacha)
		warrior.tomarObjetoQueTenesDebajo()
		
		assert.equals(armaHacha, warrior.armaEquipada())
	}
	
	test "Heroe se equipa con otra arma diferente al que tiene" {
		const armaHacha = new Arma(danioArma = 12, position = game.at(0, 0), image = "hacha.png")
		warrior.armaEquipada(armaHacha)
		
		const armaEspada = new Arma(danioArma = 15, position = game.at(0, 0), image = "espada.png")
		
		gestorDeObjetos.agregar(armaEspada)
		warrior.tomarObjetoQueTenesDebajo()
		
		assert.equals(armaEspada, warrior.armaEquipada())
		assert.equals(armaHacha, warrior.objetoDebajo())
	}
	
	test "Heroe toma una armadura y se lo equipa" {
		const armaduraBronce = new Armadura(defensaArmadura = 4, position = game.at(0, 0), image =  "armadurabronce.png")
		gestorDeObjetos.agregar(armaduraBronce)
		warrior.tomarObjetoQueTenesDebajo()
		
		assert.equals(armaduraBronce, warrior.armaduraEquipada())
	}
	
	test "Heroe se equipa con otra armadura diferente al que tiene" {
		const armaduraOro = new Armadura(defensaArmadura = 10, position = game.at(1, 4), image = "armaduraoro.png")
		warrior.armaduraEquipada(armaduraOro)
		
		const armaduraPlata = new Armadura(defensaArmadura = 7, position = game.at(0, 0), image = "armaduraplata.png")
		
		gestorDeObjetos.agregar(armaduraPlata)
		warrior.tomarObjetoQueTenesDebajo()
		
		assert.equals(armaduraPlata, warrior.armaduraEquipada())
		assert.equals(armaduraOro, warrior.objetoDebajo())
	}
	
	test "No hay nada que tomar" {
		assert.throwsException({warrior.tomarObjetoQueTenesDebajo()})
	}
	
	test "Heroe (warrior) recibe danio de enemigo sin armadura equipada" {
		const arbolFuego = new Enemigo(image = "arboldefuego.png", position = game.at(5, 2))
		arbolFuego.atacar(warrior)
		
		assert.that(warrior.actualVida() < 200)
		//nivel danio: 10 - defensa heroe: (defensa sin armadura: 8 * modificador de defensa: 1,1) => 200 - 1,2 => 198,8
		assert.equals(198.8, warrior.actualVida())
	}
	
	test "Enemigo (warrior) recibe danio de heroe sin arma equipada" {
		const arbolFuego = new Enemigo(image = "arboldefuego.png", position = game.at(5, 2))
		warrior.atacar(arbolFuego)
		
		assert.that(arbolFuego.actualVida() < 100)
		// (danio sin arma: 8 * modificador de ataque: 1,5) = 12 => 100 - 12 => 88
		assert.equals(88, arbolFuego.actualVida())
	}
	
	test "Heroe (warrior) recibe danio de enemigo con armadura equipada" {
		const arbolFuego = new Enemigo(image = "arboldefuego.png", position = game.at(5, 2))
		const armaduraOro = new Armadura(defensaArmadura = 10, position = game.at(1, 4), image = "armaduraoro.png")
		warrior.armaduraEquipada(armaduraOro)
		
		arbolFuego.atacar(warrior)
		
		assert.that(warrior.actualVida() < 200)
		//nivel danio: 10 - defensa heroe: (defensa armadura: 10 * modificador de defensa: 1,1) => 200 - 1 => 199
		assert.equals(199, warrior.actualVida())
	}
	
	test "Enemigo (warrior) recibe danio de heroe con arma equipada" {
		const arbolFuego = new Enemigo(image = "arboldefuego.png", position = game.at(5, 2))
		const armaHacha = new Arma(danioArma = 12, position = game.at(0, 0), image = "hacha.png")
		warrior.armaEquipada(armaHacha)
		
		warrior.atacar(arbolFuego)
		
		assert.that(arbolFuego.actualVida() < 100)
		// (danio arma: 12 * modificador de ataque: 1,5) = 18 => 100 - 18 => 82
		assert.equals(82, arbolFuego.actualVida())
	}
	
	test "Heroe (wizzard) recibe danio de enemigo sin armadura equipada" {
		const arbolFuego = new Enemigo(image = "arboldefuego.png", position = game.at(5, 2))
		arbolFuego.atacar(wizzard)
		
		assert.that(wizzard.actualVida() < 125)
		//nivel danio: 10 - defensa heroe: (defensa sin armadura: 8 * modificador de defensa: 0.8) => 125 - 3.6 => 121.4
		assert.equals(121.4, wizzard.actualVida())
	}
	
	test "Enemigo (wizzard) recibe danio de heroe sin arma equipada" {
		const arbolFuego = new Enemigo(image = "arboldefuego.png", position = game.at(5, 2))
		wizzard.atacar(arbolFuego)
		
		assert.that(arbolFuego.actualVida() < 100)
		// (danio sin arma: 8 * modificador de ataque: 0.9) = 12 => 100 - 7.2 => 92.8
		assert.equals(92.8, arbolFuego.actualVida())
	}
	
	test "Heroe (wizzard) recibe danio de enemigo con armadura equipada" {
		const arbolFuego = new Enemigo(image = "arboldefuego.png", position = game.at(5, 2))
		const armaduraOro = new Armadura(defensaArmadura = 10, position = game.at(1, 4), image = "armaduraoro.png")
		wizzard.armaduraEquipada(armaduraOro)
		
		arbolFuego.atacar(wizzard)
		
		assert.that(wizzard.actualVida() < 125)
		//nivel danio: 10 - defensa heroe: (defensa armadura: 10 * modificador de defensa: 0.8) => 125 - 2 => 123
		assert.equals(123, wizzard.actualVida())
	}
	
	test "Enemigo (wizzard) recibe danio de heroe con arma equipada" {
		const arbolFuego = new Enemigo(image = "arboldefuego.png", position = game.at(5, 2))
		const armaHacha = new Arma(danioArma = 12, position = game.at(0, 0), image = "hacha.png")
		wizzard.armaEquipada(armaHacha)
		
		wizzard.atacar(arbolFuego)
		
		assert.that(arbolFuego.actualVida() < 100)
		// (danio arma: 12 * modificador de ataque: 0.9) = 18 => 100 - 10.8 => 89.2
		assert.equals(89.2, arbolFuego.actualVida())
	}
	
	test "Heroe (tank) recibe danio de enemigo sin armadura equipada" {
		const arbolFuego = new Enemigo(image = "arboldefuego.png", position = game.at(5, 2))
		arbolFuego.atacar(tank)
		
		assert.that(tank.actualVida() < 250)
		//nivel danio: 10 - defensa heroe: (1 (defensa heroe supera nivel danio enemigo) => 250 - 1 => 249
		assert.equals(249, tank.actualVida())
	}
	
	test "Enemigo (tank) recibe danio de heroe sin arma equipada" {
		const arbolFuego = new Enemigo(image = "arboldefuego.png", position = game.at(5, 2))
		tank.atacar(arbolFuego)
		
		assert.that(arbolFuego.actualVida() < 100)
		// (danio sin arma: 8 * modificador de ataque: 1.1) = 8.8 => 100 - 8.8 => 91.2
		assert.equals(91.2, arbolFuego.actualVida())
	}
	
	test "Heroe (tank) recibe danio de enemigo con armadura equipada" {
		const arbolFuego = new Enemigo(image = "arboldefuego.png", position = game.at(5, 2))
		const armaduraOro = new Armadura(defensaArmadura = 10, position = game.at(1, 4), image = "armaduraoro.png")
		tank.armaduraEquipada(armaduraOro)
		
		arbolFuego.atacar(tank)
		
		assert.that(tank.actualVida() < 250)
		//nivel danio: 10 - defensa heroe: (1 (defensa heroe supera nivel danio enemigo)) => 250 - 1 => 249
		assert.equals(249, tank.actualVida())
	}
	
	test "Enemigo (tank) recibe danio de heroe con arma equipada" {
		const arbolFuego = new Enemigo(image = "arboldefuego.png", position = game.at(5, 2))
		const armaHacha = new Arma(danioArma = 12, position = game.at(0, 0), image = "hacha.png")
		tank.armaEquipada(armaHacha)
		
		tank.atacar(arbolFuego)
		
		assert.that(arbolFuego.actualVida() < 100)
		// (danio arma: 12 * modificador de ataque: 1.1) = 13.2 => 100 - 13.2 => 86.8
		assert.equals(86.8, arbolFuego.actualVida())
	}
	
	
	
//	test "Heroe aprende un hechizo" {
//		gestorDeObjetos.agregar(rayoDeHielo)
//		Warrior.tomarObjetoQueTenesDebajo()
//		
//		assert.equals(#{rayoDeHielo}, Warrior.libroDeHechizos())
//	}
//	
//	test "Heroe ya aprendió el hechizo" {
//		gestorDeObjetos.agregar(rayoDeHielo)
//		Warrior.tomarObjetoQueTenesDebajo()
//		
//		assert.throwsException({Warrior.tomarObjetoQueTenesDebajo()})
//	}

//	test "Heroe bebe poción" {
//		Warrior.actualMana(15)
//		gestorDeObjetos.agregar(pocionMana)
//		Warrior.tomarObjetoQueTenesDebajo()
//		Warrior.beberPocionMana()
//		assert.equals(30, Warrior.actualMana())
//	}
}